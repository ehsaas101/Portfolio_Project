--Overview of the Dataset

SELECT *
FROM  dbo.Housing

--Standardizing Date Format : The field "SaleDate" includes the Date and time of the sale but on close observation we notice that the time of sale is not present in our data. So the purpose of upcoming query is to change the format of this field from Date-Time to Date.

SELECT SaleDate
FROM  dbo.Housing

ALTER TABLE Housing
ADD SaleDateConverted Date;
UPDATE Housing
SET SaleDateConverted = CONVERT(Date,Saledate)

SELECT SaleDate, SaleDateConverted
FROM  dbo.Housing


--Populating Property Address date : The PropertyAddress field appears to be filled with many null values. We cannot generally populate these cells but in our case, we see that addresses of some Parcel ID's are not null which means that we can populate the null values in the PropertyAddress field with those addresses which have the same Parcel ID as the null values.

SELECT *
FROM  dbo.Housing
WHERE PropertyAddress IS NULL
ORDER BY ParcelID

SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM dbo.Housing a
JOIN dbo.Housing b
ON a.ParcelID = b.ParcelID
AND a.[UniqueID ]<>b.[UniqueID ]
WHERE a.PropertyAddress IS NULL

Update a
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM dbo.Housing a
JOIN dbo.Housing b
ON a.ParcelID = b.ParcelID
AND a.[UniqueID ]<>b.[UniqueID ]


--Splitting the Address columns into multiple columns (Address, City, State): The field PropertyAddress and OwnerAddress contains the address, city and state which needs to be split in 2 and 3
--separate columns respectively.

SELECT PropertyAddress
FROM  dbo.Housing

SELECT 
SUBSTRING(PropertyAddress, 1, CHARINDEX(',',PropertyAddress)-1) As Address
, SUBSTRING(PropertyAddress, CHARINDEX(',',PropertyAddress)+1, LEN(PropertyAddress)) As Address

FROM  dbo.Housing

ALTER TABLE Housing
ADD PropertySplitAddress Nvarchar(300), PropertySplitCity Nvarchar(300);

UPDATE Housing
SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, CHARINDEX(',',PropertyAddress)-1) 

UPDATE Housing
SET PropertySplitCity = SUBSTRING(PropertyAddress, CHARINDEX(',',PropertyAddress)+1, LEN(PropertyAddress)) 



SELECT OwnerAddress
FROM  dbo.Housing

SELECT 
PARSENAME(REPLACE(OwnerAddress,',','.'), 3)
,PARSENAME(REPLACE(OwnerAddress,',','.'), 2)
,PARSENAME(REPLACE(OwnerAddress,',','.'), 1)
FROM  dbo.Housing

ALTER TABLE Housing
ADD OwnerSplitAddress Nvarchar(300), OwnerSplitCity Nvarchar(300), OwnerSplitState Nvarchar(300)

UPDATE Housing
SET OwnerSplitAddress = PARSENAME(REPLACE(OwnerAddress,',','.'), 3)
UPDATE Housing
SET OwnerSplitCity = PARSENAME(REPLACE(OwnerAddress,',','.'), 2)
UPDATE Housing
SET OwnerSplitState = PARSENAME(REPLACE(OwnerAddress,',','.'), 1)


--Changing Y and N to Yes and No in "Sold as Vacant" field

SELECT Distinct(SoldAsVacant),Count(SoldAsVacant)
FROM Housing
GROUP BY SoldAsVacant
ORDER BY Count(SoldAsVacant)

SELECT SoldAsVacant
, CASE 
      WHEN SoldAsVacant = 'Y' THEN 'Yes'
	  WHEN SoldAsVacant = 'N' THEN 'No'
	  ELSE SoldAsVacant
  END
FROM Housing

UPDATE housing
SET SoldAsVacant = CASE 
                        WHEN SoldAsVacant = 'Y' THEN 'Yes'
	                    WHEN SoldAsVacant = 'N' THEN 'No'
	                    ELSE SoldAsVacant
                   END


--Removing Duplicates

WITH RowNumCTE AS(
SELECT *, 
 ROW_NUMBER() OVER (
 PARTITION BY ParcelID,
              PropertyAddress,
			  SalePrice,
			  SaleDate,
			  LegalReference
			  ORDER BY UniqueID
		       	  ) row_num
FROM housing
)
DELETE 
FROM RowNumCTE
where row_num>1


WITH RowNumCTE AS(
SELECT *, 
 ROW_NUMBER() OVER (
 PARTITION BY ParcelID,
              PropertyAddress,
			  SalePrice,
			  SaleDate,
			  LegalReference
			  ORDER BY UniqueID
		       	  ) row_num
FROM housing
)
SELECT * 
FROM RowNumCTE
where row_num>1
ORDER by PropertyAddress


--Deleting Unused/Useless Columns

SELECT *
FROM housing

ALTER TABLE housing
DROP COLUMN TaxDistrict, PropertyAddress, SaleDate, OwnerAddress
